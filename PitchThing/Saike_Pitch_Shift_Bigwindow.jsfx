tags: Saike - Basic pitch shifter / Big windows
version: 0.01
author: Joep Vanlier
changelog: initial commit
license: MIT
(C) Joep Vanlier 2020
provides:
  saike_pitchlib-eqp.jsfx-inc

desc:Saike Pitch Shifter Big Window

import saike_pitchlib_eqp.jsfx-inc

slider2:speed=1<0,2,.0001>playspeed
slider8:xfade=1000<10, 5000, .001>Crossfade size [ms]
slider9:window=1000<10,5000, .001>Window size [ms]

@init
function test_reinit()
(
  (window != last_window) || (last_xfade != xfade) ? (
    transition_region = 2*srate*xfade/1000;
    bufferSize = 4 * transition_region + 2 * srate * window / 1000;
    shifter.pitchShifter(0, 3*65536, bufferSize, 1*65536, 2*65536, transition_region, 0);
    last_window = window;
    last_xfade = xfade;
  );
);

function smooth_parameter(target)
instance(s, coeff)
global()
local(y, v)
(
  v = coeff*(target - s);
  y = v + s;
  s = y + v;
  y
);

function initialize_smoother(cutoff)
instance(coeff)
global(srate)
local(g)
( 
  g = tan($pi*cutoff/srate);
  coeff = g/(1+g);
);

function interpolator_init(slider_idx)
instance(next_val, idx, s)
local()
global()
(
  s = slider(slider_idx);
  next_val = slider(slider_idx);
  idx = slider_idx;
);

function interpolator_block()
instance(delta, next_changepoint_t, next_val, idx)
local(next_changepoint_y)
global(samplesblock)
(
  next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
  next_changepoint_t > 0 ? 
  (
    next_val = slider(idx);
  ) : (
    next_changepoint_y = slider(idx);
    next_changepoint_t = samplesblock;
  );
    
  delta = (next_changepoint_y - next_val) / next_changepoint_t;
);
  
function interpolate()
instance(delta, next_changepoint_t, next_val, idx, coeff)
local(current_value, next_changepoint_y)
global(current_sample)
(
  current_value = next_val;
  current_sample == next_changepoint_t ? 
  (
    delta = 0;
    next_changepoint_t = slider_next_chg(idx, next_changepoint_y);
    delta = next_changepoint_t > current_sample ? (next_changepoint_y - current_value) / (next_changepoint_t-current_sample) : 0;
  );
    
  next_val = current_value + delta;
    
  coeff > 0 ? this.smooth_parameter(current_value) : current_value
);

playspeed_interpolator.interpolator_init(2);
playspeed_interpolator.initialize_smoother(20);

@slider
test_reinit();

@block
playspeed_interpolator.interpolator_block();

@sample
pspeed = playspeed_interpolator.interpolate();

shifter.pitchShifterUpdate(spl0, spl1);
shifter.setPitchShifterSpeed((pspeed-1.0)*2);
spl0 = shifter.outL;
spl1 = shifter.outR;

@gfx

